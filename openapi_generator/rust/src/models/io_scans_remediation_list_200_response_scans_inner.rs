/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoScansRemediationList200ResponseScansInner {
    /// If `true`, the scan has a schedule and can be launched.
    #[serde(rename = "control", skip_serializing_if = "Option::is_none")]
    pub control: Option<bool>,
    /// For newly-created scans, the date on which the scan configuration was originally created. For scans that have been launched at least once, this attribute does not represent the date on which the scan configuration was originally created. Instead, it represents the date on which the scan was first launched, in Unix time format.
    #[serde(rename = "creation_date", skip_serializing_if = "Option::is_none")]
    pub creation_date: Option<i32>,
    /// Indicates whether the scan schedule is active (`true`) or inactive (`false`).
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The unique ID of the scan.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// For newly-created scans, the date on which the scan configuration was created. For scans that have been launched at least once, this attribute does not represent the date on which the scan configuration was last modified. Instead, it represents the date on which the scan was last launched, in Unix time format. Tenable.io updates this attribute each time the scan launches.
    #[serde(rename = "last_modification_date", skip_serializing_if = "Option::is_none")]
    pub last_modification_date: Option<i32>,
    /// The name of the scan.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The owner of the scan.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The unique ID of the user-defined template (policy) on which the scan configuration is based.
    #[serde(rename = "policy_id", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<i32>,
    /// A value indicating whether the user account associated with the request message has viewed the scan in the Tenable.io user interface. If `1`, the user account has viewed the scan results.
    #[serde(rename = "read", skip_serializing_if = "Option::is_none")]
    pub read: Option<bool>,
    /// The UUID for a specific instance in the scan schedule.
    #[serde(rename = "schedule_uuid", skip_serializing_if = "Option::is_none")]
    pub schedule_uuid: Option<String>,
    /// If `true`, the scan is shared with users other than the scan owner. The level of sharing is specified in the `acls` attribute of the scan details.
    #[serde(rename = "shared", skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
    /// The status of the scan. For a list of possible values, see [Scan Status](doc:scan-status-tio).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The UUID of the template.
    #[serde(rename = "template_uuid", skip_serializing_if = "Option::is_none")]
    pub template_uuid: Option<String>,
    /// The type of scan.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The requesting user's permissions for the scan.
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<i32>,
    /// The sharing permissions for the scan.
    #[serde(rename = "user_permissions", skip_serializing_if = "Option::is_none")]
    pub user_permissions: Option<i32>,
    /// The UUID of the remediation scan.
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// The UUID of the Tenable-provided template used to create either the scan or the user-defined template (policy) on which the scan configuration is based.
    #[serde(rename = "wizard_uuid", skip_serializing_if = "Option::is_none")]
    pub wizard_uuid: Option<String>,
    /// The progress of the scan ranging from 0 to 100.
    #[serde(rename = "progress", skip_serializing_if = "Option::is_none")]
    pub progress: Option<i32>,
    /// The Unix timestamp when the remediation scan run was created.
    #[serde(rename = "scan_creation_date", skip_serializing_if = "Option::is_none")]
    pub scan_creation_date: Option<i32>,
    /// If `1`, your vulnerability remediation actions on scan targets have been successful.
    #[serde(rename = "remediation", skip_serializing_if = "Option::is_none")]
    pub remediation: Option<i32>,
    /// The total number of targets in the scan.
    #[serde(rename = "total_targets", skip_serializing_if = "Option::is_none")]
    pub total_targets: Option<i32>,
}

impl IoScansRemediationList200ResponseScansInner {
    pub fn new() -> IoScansRemediationList200ResponseScansInner {
        IoScansRemediationList200ResponseScansInner {
            control: None,
            creation_date: None,
            enabled: None,
            id: None,
            last_modification_date: None,
            name: None,
            owner: None,
            policy_id: None,
            read: None,
            schedule_uuid: None,
            shared: None,
            status: None,
            template_uuid: None,
            r#type: None,
            permissions: None,
            user_permissions: None,
            uuid: None,
            wizard_uuid: None,
            progress: None,
            scan_creation_date: None,
            remediation: None,
            total_targets: None,
        }
    }
}


