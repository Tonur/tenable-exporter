/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ScansHistoryDetails200Response : A history object containing data about a run of the specified scan.



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScansHistoryDetails200Response {
    /// The unique ID of the owner of the scan.
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<i32>,
    /// The UUID for a specific instance in the scan schedule.
    #[serde(rename = "schedule_uuid", skip_serializing_if = "Option::is_none")]
    pub schedule_uuid: Option<String>,
    /// The terminal status of the scan run. For possible values, see [Scan Status](doc:scan-status-tio).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Indicates whether the scan results are older than 35 days (`true`). If this parameter is `true`, Tenable.io returns limited data for the scan run. For complete scan results that are older than 35 days, use the [POST /scans/{scan_id}/export](ref:scans-export-request) endpoint instead.
    #[serde(rename = "is_archived", skip_serializing_if = "Option::is_none")]
    pub is_archived: Option<bool>,
    /// The Unix timestamp when the scan run started.
    #[serde(rename = "scan_start", skip_serializing_if = "Option::is_none")]
    pub scan_start: Option<i32>,
    /// The UUID of the owner of the scan when the scan run occurred.
    #[serde(rename = "owner_uuid", skip_serializing_if = "Option::is_none")]
    pub owner_uuid: Option<i32>,
    /// The username of the owner of the scan when the scan run occurred.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The hosts that the scan targeted.
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<String>,
    /// The unique ID of the scan result object.
    #[serde(rename = "object_id", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<i32>,
    /// The UUID of the historical data.
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// The Unix timestamp when the scan run finished.
    #[serde(rename = "scan_end", skip_serializing_if = "Option::is_none")]
    pub scan_end: Option<i32>,
    /// The type of scan: `ps` (a scan performed over the network by a cloud scanner), `remote` (a  scan performed over the network by a local scanner), `agent` (a scan on a local host that a Nessus agent performs directly), or `null` (the scan has never been launched, or the scan is imported).
    #[serde(rename = "scan_type", skip_serializing_if = "Option::is_none")]
    pub scan_type: Option<String>,
    /// The name of the scan.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl ScansHistoryDetails200Response {
    /// A history object containing data about a run of the specified scan.
    pub fn new() -> ScansHistoryDetails200Response {
        ScansHistoryDetails200Response {
            owner_id: None,
            schedule_uuid: None,
            status: None,
            is_archived: None,
            scan_start: None,
            owner_uuid: None,
            owner: None,
            targets: None,
            object_id: None,
            uuid: None,
            scan_end: None,
            scan_type: None,
            name: None,
        }
    }
}


