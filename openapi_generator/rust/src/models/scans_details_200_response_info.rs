/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScansDetails200ResponseInfo {
    /// The owner of the scan.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The name of the scan.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Indicates whether the scan based on this policy can specify targets.
    #[serde(rename = "no_target", skip_serializing_if = "Option::is_none")]
    pub no_target: Option<bool>,
    /// The unique ID of the destination folder for the scan.
    #[serde(rename = "folder_id", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<i32>,
    /// If `true`, the scan has a schedule and can be launched.
    #[serde(rename = "control", skip_serializing_if = "Option::is_none")]
    pub control: Option<bool>,
    /// The sharing permissions for the scan.
    #[serde(rename = "user_permissions", skip_serializing_if = "Option::is_none")]
    pub user_permissions: Option<i32>,
    /// The UUID for a specific instance in the scan schedule.
    #[serde(rename = "schedule_uuid", skip_serializing_if = "Option::is_none")]
    pub schedule_uuid: Option<String>,
    /// If `true`, the requesting user can edit this scan configuration.
    #[serde(rename = "edit_allowed", skip_serializing_if = "Option::is_none")]
    pub edit_allowed: Option<bool>,
    /// The name of the scanner configured to run the scan.
    #[serde(rename = "scanner_name", skip_serializing_if = "Option::is_none")]
    pub scanner_name: Option<String>,
    /// The name of the scan template associated with the scan.
    #[serde(rename = "policy", skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// If `true`, the scan is shared with users other than the owner. The level of sharing is specified in the `acls` attribute of the scan details.
    #[serde(rename = "shared", skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
    /// The unique ID of the scan result object.
    #[serde(rename = "object_id", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<i32>,
    /// The list of asset tag identifiers the scan uses to determine which assets it evaluates. For more information about tag-based scans, see [Manage Tag-Based Scans](doc:manage-tag-based-scans-tio).
    #[serde(rename = "tag_targets", skip_serializing_if = "Option::is_none")]
    pub tag_targets: Option<Vec<String>>,
    /// An array of objects that control sharing permissions for the scan.
    #[serde(rename = "acls", skip_serializing_if = "Option::is_none")]
    pub acls: Option<Vec<crate::models::ScansCreateRequestSettingsAclsInner>>,
    /// The total number of assets scanned for vulnerabilities.
    #[serde(rename = "hostcount", skip_serializing_if = "Option::is_none")]
    pub hostcount: Option<i32>,
    /// The UUID of the scan.
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// The status of the scan. For a list of possible values, see [Scan Status](doc:scan-status-tio).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The type of scan: `ps` (a scan performed over the network by a cloud scanner), `remote` (a  scan performed over the network by a local scanner), `agent` (a scan on a local host that a Nessus agent performs directly), or `null` (the scan has never been launched, or the scan is imported).
    #[serde(rename = "scan_type", skip_serializing_if = "Option::is_none")]
    pub scan_type: Option<String>,
    /// A comma-delimited list of IPv4 addresses that are configured as targets for the scan.
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<String>,
    /// If `true`, Tenable.io did not launch the scan with a target list. This parameter is `true` for agent scans.
    #[serde(rename = "alt_targets_used", skip_serializing_if = "Option::is_none")]
    pub alt_targets_used: Option<bool>,
    /// If `true`, you can submit the results of the scan for PCI ASV review. For more information, see [PCI ASV](https://docs.tenable.com/vulnerability-management/Content/PCI_ASV/GetStarted.htm) in the Tenable Vulnerability Management User Guide.
    #[serde(rename = "pci-can-upload", skip_serializing_if = "Option::is_none")]
    pub pci_can_upload: Option<bool>,
    /// The Unix timestamp when the scan run started.
    #[serde(rename = "scan_start", skip_serializing_if = "Option::is_none")]
    pub scan_start: Option<i32>,
    /// The Unix timestamp when the scan run finished.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
    /// Indicates whether the scan results are older than 35 days (`true`). If this attribute is `true`, the response message for this endpoint excludes the `hosts`, `vulnerabilities`, `comphosts`, `compliance`, and `filters` objects. For complete scan results older than 35 days, use the [POST /scans/{scan_id}/export](ref:scans-export-request) endpoint instead.
    #[serde(rename = "is_archived", skip_serializing_if = "Option::is_none")]
    pub is_archived: Option<bool>,
    /// The Unix timestamp when the scan run finished.
    #[serde(rename = "scan_end", skip_serializing_if = "Option::is_none")]
    pub scan_end: Option<i32>,
    /// Indicates whether a scan has a Knowledge Base (KB) associated with it. A KB is an ASCII text file containing a log of information relevant to the scan performed and results found.
    #[serde(rename = "haskb", skip_serializing_if = "Option::is_none")]
    pub haskb: Option<bool>,
    /// Indicates whether the scan is configured to create an audit trail.
    #[serde(rename = "hasaudittrail", skip_serializing_if = "Option::is_none")]
    pub hasaudittrail: Option<bool>,
    /// The scan's start time, if the scan is imported.
    #[serde(rename = "scanner_start", skip_serializing_if = "Option::is_none")]
    pub scanner_start: Option<String>,
    /// The scan's end time, if the scan is imported.
    #[serde(rename = "scanner_end", skip_serializing_if = "Option::is_none")]
    pub scanner_end: Option<String>,
}

impl ScansDetails200ResponseInfo {
    pub fn new() -> ScansDetails200ResponseInfo {
        ScansDetails200ResponseInfo {
            owner: None,
            name: None,
            no_target: None,
            folder_id: None,
            control: None,
            user_permissions: None,
            schedule_uuid: None,
            edit_allowed: None,
            scanner_name: None,
            policy: None,
            shared: None,
            object_id: None,
            tag_targets: None,
            acls: None,
            hostcount: None,
            uuid: None,
            status: None,
            scan_type: None,
            targets: None,
            alt_targets_used: None,
            pci_can_upload: None,
            scan_start: None,
            timestamp: None,
            is_archived: None,
            scan_end: None,
            haskb: None,
            hasaudittrail: None,
            scanner_start: None,
            scanner_end: None,
        }
    }
}


