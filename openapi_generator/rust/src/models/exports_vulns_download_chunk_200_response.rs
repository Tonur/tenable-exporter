/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ExportsVulnsDownloadChunk200Response : A chunk of vulnerabilities information.



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExportsVulnsDownloadChunk200Response {
    /// Information about the asset where the scan detected the vulnerability.
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<Vec<crate::models::ExportsVulnsDownloadChunk200ResponseAssetInner>>,
    /// The text output of the Nessus scanner.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    /// Information about the plugin that detected the vulnerability.
    #[serde(rename = "plugin", skip_serializing_if = "Option::is_none")]
    pub plugin: Option<Vec<crate::models::ExportsVulnsDownloadChunk200ResponsePluginInner>>,
    /// Information about the port the scanner used to connect to the asset.
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<Vec<crate::models::ExportsVulnsDownloadChunk200ResponsePortInner>>,
    /// The text that appears in the Comment field of the recast rule in the Tenable Vulnerability Management user interface.
    #[serde(rename = "recast_reason", skip_serializing_if = "Option::is_none")]
    pub recast_reason: Option<String>,
    /// The UUID of the recast rule that applies to the plugin.
    #[serde(rename = "recast_rule_uuid", skip_serializing_if = "Option::is_none")]
    pub recast_rule_uuid: Option<String>,
    /// Information about the latest scan that detected the vulnerability.
    #[serde(rename = "scan", skip_serializing_if = "Option::is_none")]
    pub scan: Option<Vec<crate::models::ExportsVulnsDownloadChunk200ResponseScanInner>>,
    /// The severity of the vulnerability as defined using the Common Vulnerability Scoring System (CVSS) base score. Possible values include `info` (CVSS score of 0), `low` (CVSS score between 0.1 and 3.9), `medium` (CVSS score between 4.0 and 6.9), `high` (CVSS score between 7.0 and 9.9), and `critical` (CVSS score of 10.0).
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    /// The code for the severity assigned when a user recast the risk associated with the vulnerability. Possible values include:   - 0—The vulnerability has a CVSS score of 0, which corresponds to the \"info\" severity level.  - 1—The vulnerability has a CVSS score between 0.1 and 3.9, which corresponds to the \"low\" severity level.  - 2—The vulnerability has a CVSS score between 4.0 and 6.9, which corresponds to the \"medium\" severity level.  - 3—The vulnerability has a CVSS score between 7.0 and 9.9, which corresponds to the \"high\" severity level.  - 4—The vulnerability has a CVSS score of 10.0, which corresponds to the \"critical\" severity level.
    #[serde(rename = "severity_id", skip_serializing_if = "Option::is_none")]
    pub severity_id: Option<i32>,
    /// The code for the severity originally assigned to a vulnerability before a user recast the risk associated with the vulnerability. Possible values are the same as for the `severity_id` attribute.
    #[serde(rename = "severity_default_id", skip_serializing_if = "Option::is_none")]
    pub severity_default_id: Option<i32>,
    /// The type of modification a user made to the vulnerability's severity. Possible values include:   - none—No modification has been made.  - recasted—A user in the Vulnerability Management user interface has recast the risk associated with the vulnerability.   - accepted—A user in the vulnerability Management user interface has accepted the risk associated with the vulnerability.   For more information about recast and accept rules, see the [Recast/Accept Rules](https://docs.tenable.com/vulnerability-management/Content/Settings/Recast/AboutRecastRules.htm) in the Tenable Vulnerability Management User Guide.
    #[serde(rename = "severity_modification_type", skip_serializing_if = "Option::is_none")]
    pub severity_modification_type: Option<String>,
    /// The ISO date when a scan first detected the vulnerability on the asset.
    #[serde(rename = "first_found", skip_serializing_if = "Option::is_none")]
    pub first_found: Option<String>,
    /// The ISO date when a scan no longer detects the previously detected vulnerability on the asset.
    #[serde(rename = "last_fixed", skip_serializing_if = "Option::is_none")]
    pub last_fixed: Option<String>,
    /// The ISO date when a scan last detected the vulnerability on the asset.
    #[serde(rename = "last_found", skip_serializing_if = "Option::is_none")]
    pub last_found: Option<String>,
    /// The date and time (in Unix time) when the vulnerability was indexed into Tenable Vulnerability Management.
    #[serde(rename = "indexed_at", skip_serializing_if = "Option::is_none")]
    pub indexed_at: Option<i64>,
    /// The state of the vulnerability as determined by the Tenable Vulnerability Management state service. Possible values include:   - OPEN—The vulnerability is currently present on an asset.   - REOPENED—The vulnerability was previously marked as fixed on an asset, but has been detected again by a new scan.   - FIXED—The vulnerability was present on an asset, but is no longer detected.  Note that the API uses different terms for vulnerability states than the user interface. The `new` and `active` states in the user interface map to the `open` state in the API. The `resurfaced` state in the user interface maps to the `reopened` state in the API. The `fixed` state is the same.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The source of the scans that identified the vulnerability. Sources can include sensors, connectors, and API imports. The values in the `source` field correspond to the names of the sources as defined in your organization's implementation of Tenable Vulnerability Management.   Commonly used source names include:  - AWS—The vulnerability data was obtained from an Amazon Web Services connector.  - AGENT—The vulnerability data was obtained from a Tenable Nessus Agent scan.  - NNM—The vulnerability data was obtained from a Tenable Nessus Network Monitor (NNM) scan.  - NESSUS—The vulnerability data was obtained from a Tenable Nessus scan.
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

impl ExportsVulnsDownloadChunk200Response {
    /// A chunk of vulnerabilities information.
    pub fn new() -> ExportsVulnsDownloadChunk200Response {
        ExportsVulnsDownloadChunk200Response {
            asset: None,
            output: None,
            plugin: None,
            port: None,
            recast_reason: None,
            recast_rule_uuid: None,
            scan: None,
            severity: None,
            severity_id: None,
            severity_default_id: None,
            severity_modification_type: None,
            first_found: None,
            last_fixed: None,
            last_found: None,
            indexed_at: None,
            state: None,
            source: None,
        }
    }
}


