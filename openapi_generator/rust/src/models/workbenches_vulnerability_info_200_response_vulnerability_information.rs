/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkbenchesVulnerabilityInfo200ResponseVulnerabilityInformation {
    /// The ISO timestamp for the first publication date of the plugin.
    #[serde(rename = "vulnerability_publication_date", skip_serializing_if = "Option::is_none")]
    pub vulnerability_publication_date: Option<String>,
    /// The vulnerability discovered by this plugin is known to be exploited by malware.
    #[serde(rename = "exploited_by_malware", skip_serializing_if = "Option::is_none")]
    pub exploited_by_malware: Option<bool>,
    /// The ISO timestamp for date on which the vendor published a patch for the vulnerability.
    #[serde(rename = "patch_publication_date", skip_serializing_if = "Option::is_none")]
    pub patch_publication_date: Option<String>,
    /// A value specifying whether a public exploit exists for the vulnerability.
    #[serde(rename = "exploit_available", skip_serializing_if = "Option::is_none")]
    pub exploit_available: Option<bool>,
    /// Description of how easy it is to exploit the issue.
    #[serde(rename = "exploitability_ease", skip_serializing_if = "Option::is_none")]
    pub exploitability_ease: Option<String>,
    /// 
    #[serde(rename = "asset_inventory", skip_serializing_if = "Option::is_none")]
    pub asset_inventory: Option<String>,
    /// 
    #[serde(rename = "default_account", skip_serializing_if = "Option::is_none")]
    pub default_account: Option<String>,
    /// A value specifying whether Nessus exploited the vulnerability during the process of identification.
    #[serde(rename = "exploited_by_nessus", skip_serializing_if = "Option::is_none")]
    pub exploited_by_nessus: Option<bool>,
    /// A value specifying whether this plugin has received media attention (for example, ShellShock, Meltdown).
    #[serde(rename = "in_the_news", skip_serializing_if = "Option::is_none")]
    pub in_the_news: Option<bool>,
    /// 
    #[serde(rename = "malware", skip_serializing_if = "Option::is_none")]
    pub malware: Option<String>,
    /// Software found by this plugin is unsupported by the software's vendor (for example, Windows 95 or Firefox 3).
    #[serde(rename = "unsupported_by_vendor", skip_serializing_if = "Option::is_none")]
    pub unsupported_by_vendor: Option<bool>,
    /// The Common Platform Enumeration (CPE) number for the plugin.
    #[serde(rename = "cpe", skip_serializing_if = "Option::is_none")]
    pub cpe: Option<String>,
    /// A list of exploit frameworks that have identified the vulnerability.
    #[serde(rename = "exploit_frameworks", skip_serializing_if = "Option::is_none")]
    pub exploit_frameworks: Option<Vec<crate::models::WorkbenchesVulnerabilityInfo200ResponseVulnerabilityInformationExploitFrameworksInner>>,
}

impl WorkbenchesVulnerabilityInfo200ResponseVulnerabilityInformation {
    pub fn new() -> WorkbenchesVulnerabilityInfo200ResponseVulnerabilityInformation {
        WorkbenchesVulnerabilityInfo200ResponseVulnerabilityInformation {
            vulnerability_publication_date: None,
            exploited_by_malware: None,
            patch_publication_date: None,
            exploit_available: None,
            exploitability_ease: None,
            asset_inventory: None,
            default_account: None,
            exploited_by_nessus: None,
            in_the_news: None,
            malware: None,
            unsupported_by_vendor: None,
            cpe: None,
            exploit_frameworks: None,
        }
    }
}


