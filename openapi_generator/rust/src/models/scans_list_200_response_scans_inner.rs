/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScansList200ResponseScansInner {
    /// If `true`, the scan has a schedule and can be launched.
    #[serde(rename = "control", skip_serializing_if = "Option::is_none")]
    pub control: Option<bool>,
    /// For newly-created scans, the date on which the scan configuration was originally created. For scans that have been launched at least once, this attribute does not represent the date on which the scan configuration was originally created. Instead, it represents the date on which the scan was first launched, in Unix time format.
    #[serde(rename = "creation_date", skip_serializing_if = "Option::is_none")]
    pub creation_date: Option<i32>,
    /// Indicates whether the scan schedule is active (`true`) or inactive (`false`).
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The unique ID of the scan.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// For newly-created scans, the date on which the scan configuration was created. For scans that have been launched at least once, this attribute does not represent the date on which the scan configuration was last modified. Instead, it represents the date on which the scan was last launched, in Unix time format. Tenable.io updates this attribute each time the scan launches.
    #[serde(rename = "last_modification_date", skip_serializing_if = "Option::is_none")]
    pub last_modification_date: Option<i32>,
    /// A value indicating whether the scan results were created before a change in storage method. If `true`, Tenable.io stores the results in the old storage method. If `false`, Tenable.io stores the results in the new storage method.
    #[serde(rename = "legacy", skip_serializing_if = "Option::is_none")]
    pub legacy: Option<bool>,
    /// The name of the scan.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The owner of the scan.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The unique ID of the user-defined template (policy) on which the scan configuration is based.
    #[serde(rename = "policy_id", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<i32>,
    /// A value indicating whether the user account associated with the request message has viewed the scan in the Tenable.io user interface. If `1`, the user account has viewed the scan results.
    #[serde(rename = "read", skip_serializing_if = "Option::is_none")]
    pub read: Option<bool>,
    /// The UUID for a specific instance in the scan schedule.
    #[serde(rename = "schedule_uuid", skip_serializing_if = "Option::is_none")]
    pub schedule_uuid: Option<String>,
    /// If `true`, the scan is shared with users other than the scan owner. The level of sharing is specified in the `acls` attribute of the scan details.
    #[serde(rename = "shared", skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
    /// The status of the scan. For a list of possible values, see [Scan Status](doc:scan-status-tio).
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The UUID of the template.
    #[serde(rename = "template_uuid", skip_serializing_if = "Option::is_none")]
    pub template_uuid: Option<String>,
    /// The type of scan.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The requesting user's permissions for the scan.
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<i32>,
    /// The sharing permissions for the scan.
    #[serde(rename = "user_permissions", skip_serializing_if = "Option::is_none")]
    pub user_permissions: Option<i32>,
    /// The UUID of the scan.
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// The UUID of the Tenable-provided template used to create either the scan or the user-defined template (policy) on which the scan configuration is based.
    #[serde(rename = "wizard_uuid", skip_serializing_if = "Option::is_none")]
    pub wizard_uuid: Option<String>,
    /// The progress of the scan ranging from 0 to 100.
    #[serde(rename = "progress", skip_serializing_if = "Option::is_none")]
    pub progress: Option<i32>,
    /// The timezone of the scheduled start time for the scan.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// The interval at which the scan repeats. The interval is formatted as a string of three values delimited by semi-colons. These values are: the frequency (FREQ=ONETIME or DAILY or WEEKLY or MONTHLY or YEARLY), the interval (INTERVAL=1 or 2 or 3 ... x), and the days of the week (BYDAY=SU,MO,TU,WE,TH,FR,SA). For a scan that runs every three weeks on Monday Wednesday and Friday, the string would be `FREQ=WEEKLY;INTERVAL=3;BYDAY=MO,WE,FR`. If the scan is not scheduled to recur, this attribute is `null`. For more information, see [rrules Format](doc:example-assessment-scan-recurring#rrules-format).  **Note:** To set the `rrules` parameter for an agent scan, the request must also include the following body parameters:<ul><li>The `uuid` parameter must specify an agent scan template. For more information, see [Tenable-Provided Agent Templates](https://docs.tenable.com/vulnerability-management/Content/Scans/AgentTemplates.htm) and the [GET /editor/scan/templates](ref:editor-list-templates) endpoint.</li><li>The `agent_group_id` parameter must specify an agent group. For more information, see [Agent Groups](ref:agent-groups).</li></ul>For an example request body for an agent scan, see [Example Agent Scan: Recurring](doc:example-agent-scan-recurring).
    #[serde(rename = "rrules", skip_serializing_if = "Option::is_none")]
    pub rrules: Option<String>,
    /// For one-time scans, the starting time and date for the scan. For recurrent scans, the first date on which the scan schedule is active and the time that recurring scans launch based on the `rrules` attribute.  This attribute has the following format: `YYYYMMDDTHHMMSS`.
    #[serde(rename = "starttime", skip_serializing_if = "Option::is_none")]
    pub starttime: Option<String>,
    /// The total number of targets in the scan.
    #[serde(rename = "total_targets", skip_serializing_if = "Option::is_none")]
    pub total_targets: Option<i32>,
}

impl ScansList200ResponseScansInner {
    pub fn new() -> ScansList200ResponseScansInner {
        ScansList200ResponseScansInner {
            control: None,
            creation_date: None,
            enabled: None,
            id: None,
            last_modification_date: None,
            legacy: None,
            name: None,
            owner: None,
            policy_id: None,
            read: None,
            schedule_uuid: None,
            shared: None,
            status: None,
            template_uuid: None,
            r#type: None,
            permissions: None,
            user_permissions: None,
            uuid: None,
            wizard_uuid: None,
            progress: None,
            timezone: None,
            rrules: None,
            starttime: None,
            total_targets: None,
        }
    }
}


