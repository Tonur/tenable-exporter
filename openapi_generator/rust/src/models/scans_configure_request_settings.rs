/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScansConfigureRequestSettings {
    /// The name of the scan.
    #[serde(rename = "name")]
    pub name: String,
    /// The description of the scan.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The unique ID of the folder where you want to store the scan. Use the [GET /folders](ref:folders-list) endpoint to find the folder ID.
    #[serde(rename = "folder_id", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<i32>,
    /// The unique ID of the user you want to make the owner of the specified scan. You can only change ownership for scans where you have OWNER [128] scan permissions. For more information, see [Change Scan Ownership](doc:change-scan-ownership-tio).
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<i32>,
    /// The unique ID of the scanner to use. Use the [GET /scanners](ref:scanners-list) endpoint to find the scanner ID. You can use the special value `AUTO-ROUTED` to assign scan targets to scanner groups based on the groups' configured scan routes. For more information, see [Manage Scan Routing](doc:manage-scan-routing-tio).   **Note:** If you omit this parameter from the request, Tenable.io assigns the US Cloud Scanner by default.
    #[serde(rename = "scanner_id", skip_serializing_if = "Option::is_none")]
    pub scanner_id: Option<String>,
    /// This field is required if the `scanner_id` parameter is `AUTO-ROUTED`. Specify a value as follows:<ul><li>If your scans involve separate environments with overlapping IP ranges, specify the UUID of the [network](doc:manage-networks-tio) you want to associate with the results of the auto-routed scan. This value must match the network where you have assigned the scanner groups that you configured for scan routing.</li><li>Otherwise, specify the default network (`00000000-0000-0000-0000-000000000000`).</li></ul><p>**Note:** This parameter does not override network associations for scans that are not auto-routed. Tenable.io automatically associates a non-routed scan with the network to which you have assigned the scanner that performs the scan.</p>
    #[serde(rename = "target_network_uuid", skip_serializing_if = "Option::is_none")]
    pub target_network_uuid: Option<String>,
    /// If `true`, the schedule for the scan is enabled. Note that scheduled scans do not run if they are in the scan owner's trash folder.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// When to launch the scan. Possible values are: DAILY, WEEKLY, MONTHLY, YEARLY. Note that scheduled scans do not run if they are in the scan owner's trash folder.
    #[serde(rename = "launch", skip_serializing_if = "Option::is_none")]
    pub launch: Option<Launch>,
    /// This parameter depends on the type of scan: <ul><li>For Nessus agent scans, `scan_time_window` is the time frame, in minutes, during which agents must transmit scan results to Tenable.io in order to be included in dashboards and reports. If your request omits this parameter, the default value is 180 minutes.</li><li>For Nessus scanner scans, `scan_time_window` is the time frame, in minutes, after which the scan will automatically stop. If your request omits this parameter, the default value is 0 and the scan will not stop after a certain time frame.</li></ul>
    #[serde(rename = "scan_time_window", skip_serializing_if = "Option::is_none")]
    pub scan_time_window: Option<i32>,
    /// For one-time scans, the starting time and date for the scan. For recurrent scans, the first date on which the scan schedule is active and the time that recurring scans launch based on the `rrules` parameter.  This parameter must be in the following format: `YYYYMMDDTHHMMSS`.
    #[serde(rename = "starttime", skip_serializing_if = "Option::is_none")]
    pub starttime: Option<String>,
    /// The interval at which the scan repeats. The interval is formatted as a string of three values delimited by semi-colons. These values are: the frequency (FREQ=ONETIME or DAILY or WEEKLY or MONTHLY or YEARLY), the interval (INTERVAL=1 or 2 or 3 ... x), and the days of the week (BYDAY=SU,MO,TU,WE,TH,FR,SA). For a scan that runs every three weeks on Monday Wednesday and Friday, the string would be `FREQ=WEEKLY;INTERVAL=3;BYDAY=MO,WE,FR`. If the scan is not scheduled to recur, this attribute is `null`. For more information, see [rrules Format](doc:example-assessment-scan-recurring#rrules-format).  **Note:** To set the `rrules` parameter for an agent scan, the request must also include the following body parameters:<ul><li>The `uuid` parameter must specify an agent scan template. For more information, see [Tenable-Provided Agent Templates](https://docs.tenable.com/vulnerability-management/Content/Scans/AgentTemplates.htm) and the [GET /editor/scan/templates](ref:editor-list-templates) endpoint.</li><li>The `agent_group_id` parameter must specify an agent group. For more information, see [Agent Groups](ref:agent-groups).</li></ul>For an example request body for an agent scan, see [Example Agent Scan: Recurring](doc:example-agent-scan-recurring).
    #[serde(rename = "rrules", skip_serializing_if = "Option::is_none")]
    pub rrules: Option<String>,
    /// The timezone of the scheduled start time for the scan.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// The list of targets to scan. For a full list of supported target formats, see the [Tenable Vulnerability Management User Guide](https://docs.tenable.com/vulnerability-management/Content/Scans/AboutScanTargets.htm). You can specify multiple targets (of differing formats) as a comma-delimited list.   This parameter is required if your request omits other target parameters. For more information, see \"Required Scan Target Parameters\" in [Create a Scan](doc:create-scan-tio).   **Note:** Tenable.io does not perform validation on values you submit for this parameter. If you submit invalid values, Tenable.io stores the invalid values in the scan configuration; when the scan runs, scanning fails on the invalid targets.
    #[serde(rename = "text_targets", skip_serializing_if = "Option::is_none")]
    pub text_targets: Option<String>,
    /// An array of target group IDs to scan. Use the [GET /target-groups](/reference#target-groups-list) endpoint to determine target group IDs.  This parameter is required if your request omits other target parameters. For more information, see \"Required Scan Target Parameters\" in [Create a Scan](doc:create-scan-tio).
    #[serde(rename = "target_groups", skip_serializing_if = "Option::is_none")]
    pub target_groups: Option<Vec<i32>>,
    /// The name of a file containing the list of targets to scan. Before you use this parameter, use the [POST /files/upload](ref:file-upload) endpoint to upload the file to Tenable.io; then, use the `fileuploaded` attribute of the response message as the `file_targets` parameter value.    This parameter is required if your request omits other target parameters. For more information, see \"Required Scan Target Parameters\" in [Create a Scan](doc:create-scan-tio).   **Note:** Unicode/UTF-8 encoding is not supported in the targets file.
    #[serde(rename = "file_targets", skip_serializing_if = "Option::is_none")]
    pub file_targets: Option<String>,
    /// The list of asset tag identifiers that the scan uses to determine which assets it evaluates. For more information about tag-based scans, see [Manage Tag-Based Scans](doc:manage-tag-based-scans-tio).    This parameter is required if your request omits other target parameters. For more information, see \"Required Scan Target Parameters\" in [Create a Scan](doc:create-scan-tio).
    #[serde(rename = "tag_targets", skip_serializing_if = "Option::is_none")]
    pub tag_targets: Option<Vec<String>>,
    /// An array of agent group UUIDs to scan. Required if the scan is an agent scan.
    #[serde(rename = "agent_group_id", skip_serializing_if = "Option::is_none")]
    pub agent_group_id: Option<Vec<String>>,
    /// Indicates whether an agent scan should use the scan window (scheduled) or rule-based (triggered) method for scan launches.
    #[serde(rename = "agent_scan_launch_type", skip_serializing_if = "Option::is_none")]
    pub agent_scan_launch_type: Option<AgentScanLaunchType>,
    /// Describes the scan triggers used when `agent_scan_launch_type` is set to `triggered`.
    #[serde(rename = "triggers", skip_serializing_if = "Option::is_none")]
    pub triggers: Option<Vec<crate::models::ScansCreateRequestSettingsTriggersInner>>,
    /// A comma-separated list of accounts that receive the email summary report.
    #[serde(rename = "emails", skip_serializing_if = "Option::is_none")]
    pub emails: Option<String>,
    /// An array containing sharing permissions to apply to the scan.
    #[serde(rename = "acls", skip_serializing_if = "Option::is_none")]
    pub acls: Option<Vec<crate::models::ScansCreateRequestSettingsAclsInner>>,
}

impl ScansConfigureRequestSettings {
    pub fn new(name: String) -> ScansConfigureRequestSettings {
        ScansConfigureRequestSettings {
            name,
            description: None,
            folder_id: None,
            owner_id: None,
            scanner_id: None,
            target_network_uuid: None,
            enabled: None,
            launch: None,
            scan_time_window: None,
            starttime: None,
            rrules: None,
            timezone: None,
            text_targets: None,
            target_groups: None,
            file_targets: None,
            tag_targets: None,
            agent_group_id: None,
            agent_scan_launch_type: None,
            triggers: None,
            emails: None,
            acls: None,
        }
    }
}

/// When to launch the scan. Possible values are: DAILY, WEEKLY, MONTHLY, YEARLY. Note that scheduled scans do not run if they are in the scan owner's trash folder.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Launch {
    #[serde(rename = "DAILY")]
    Daily,
    #[serde(rename = "WEEKLY")]
    Weekly,
    #[serde(rename = "MONTHLY")]
    Monthly,
    #[serde(rename = "YEARLY")]
    Yearly,
}

impl Default for Launch {
    fn default() -> Launch {
        Self::Daily
    }
}
/// Indicates whether an agent scan should use the scan window (scheduled) or rule-based (triggered) method for scan launches.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AgentScanLaunchType {
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "triggered")]
    Triggered,
}

impl Default for AgentScanLaunchType {
    fn default() -> AgentScanLaunchType {
        Self::Scheduled
    }
}

