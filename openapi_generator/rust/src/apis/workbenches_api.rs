/*
 * Vulnerability Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`workbenches_asset_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetInfoError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_asset_vulnerabilities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetVulnerabilitiesError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_asset_vulnerability_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetVulnerabilityInfoError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_asset_vulnerability_output`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetVulnerabilityOutputError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_assets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetsError {
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_assets_activity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetsActivityError {
    Status401(),
    Status404(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_assets_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetsDeleteError {
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_assets_vulnerabilities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesAssetsVulnerabilitiesError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_export_download`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesExportDownloadError {
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_export_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesExportRequestError {
    Status400(crate::models::WorkbenchesExportRequest400Response),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_export_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesExportStatusError {
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_vulnerabilities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesVulnerabilitiesError {
    Status400(),
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_vulnerability_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesVulnerabilityInfoError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workbenches_vulnerability_output`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkbenchesVulnerabilityOutputError {
    Status403(),
    Status429(),
    UnknownValue(serde_json::Value),
}


/// Returns information about the specified asset.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_asset_info(configuration: &configuration::Configuration, asset_id: &str, all_fields: Option<&str>) -> Result<crate::models::WorkbenchesAssetInfo200Response, Error<WorkbenchesAssetInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets/{asset_id}/info", local_var_configuration.base_path, asset_id=crate::apis::urlencode(asset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = all_fields {
        local_var_req_builder = local_var_req_builder.query(&[("all_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves a list of the vulnerabilities recorded for a specified asset. By default, this list is sorted by vulnerability count in descending order. The list returned is limited to 5,000. To retrieve more than 5,000 vulnerabilities, use the [export-request API](ref:workbenches-export-request).   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_asset_vulnerabilities(configuration: &configuration::Configuration, asset_id: &str, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>) -> Result<crate::models::WorkbenchesVulnerabilities200Response, Error<WorkbenchesAssetVulnerabilitiesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets/{asset_id}/vulnerabilities", local_var_configuration.base_path, asset_id=crate::apis::urlencode(asset_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetVulnerabilitiesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the details for a vulnerability recorded on a specified asset.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_asset_vulnerability_info(configuration: &configuration::Configuration, asset_id: &str, plugin_id: i32, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>) -> Result<crate::models::WorkbenchesAssetVulnerabilityInfo200Response, Error<WorkbenchesAssetVulnerabilityInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets/{asset_id}/vulnerabilities/{plugin_id}/info", local_var_configuration.base_path, asset_id=crate::apis::urlencode(asset_id), plugin_id=plugin_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetVulnerabilityInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the vulnerability outputs for a plugin recorded on a specified asset.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_asset_vulnerability_output(configuration: &configuration::Configuration, asset_id: &str, plugin_id: i32, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>) -> Result<crate::models::WorkbenchesAssetVulnerabilityOutput200Response, Error<WorkbenchesAssetVulnerabilityOutputError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets/{asset_id}/vulnerabilities/{plugin_id}/outputs", local_var_configuration.base_path, asset_id=crate::apis::urlencode(asset_id), plugin_id=plugin_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetVulnerabilityOutputError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves a list of assets. The list can be modified using filters. The list returned is limited to 5,000. To retrieve more than 5,000 assets, use the [export-request API](ref:exports-assets-request-export).   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_assets(configuration: &configuration::Configuration, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>, all_fields: Option<&str>) -> Result<crate::models::WorkbenchesAssets200Response, Error<WorkbenchesAssetsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = all_fields {
        local_var_req_builder = local_var_req_builder.query(&[("all_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the activity log for the specified asset. Event types include:<ul><li>discovered—Asset created (for example, by a network scan or import).</li><li>seen—Asset observed by a network scan without any changes to its attributes.</li><li>tagging—Tag added to or removed from asset.</li><li>attribute_change—A scan identified new or changed attributes for the asset (for example, new software applications installed on the asset).</li><li>updated—Asset updated either manually by a user or automatically by a new scan.</li></ul>   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_assets_activity(configuration: &configuration::Configuration, asset_uuid: &str) -> Result<Vec<crate::models::WorkbenchesAssetsActivity200ResponseInner>, Error<WorkbenchesAssetsActivityError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets/{asset_uuid}/activity", local_var_configuration.base_path, asset_uuid=crate::apis::urlencode(asset_uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetsActivityError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes the specified asset. When you delete an asset, Tenable.io deletes vulnerability data associated with the asset. Deleting an asset does not immediately subtract the asset from your licensed assets count. Deleted assets continue to be included in the count until they automatically age out as inactive.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires SCAN OPERATOR [24] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_assets_delete(configuration: &configuration::Configuration, asset_uuid: &str) -> Result<serde_json::Value, Error<WorkbenchesAssetsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets/{asset_uuid}", local_var_configuration.base_path, asset_uuid=crate::apis::urlencode(asset_uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of assets with vulnerabilities. The list is limited to 5,000. To retrieve more than 5,000 assets, use the [export-request API](ref:workbenches-export-request).   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_assets_vulnerabilities(configuration: &configuration::Configuration, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>) -> Result<Vec<crate::models::WorkbenchesAssetsVulnerabilities200ResponseInner>, Error<WorkbenchesAssetsVulnerabilitiesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/assets/vulnerabilities", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesAssetsVulnerabilitiesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Downloads a file that has been prepared for export. For more information about workbench export files, see [Export File Formats](doc:export-file-formats).   **Caution:** This endpoint is deprecated. Tenable recommends that customers use the [Create report](ref:vm-reports-create) endpoint instead. Please update any existing integrations that your organization has.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_export_download(configuration: &configuration::Configuration, file_id: i32) -> Result<serde_json::Value, Error<WorkbenchesExportDownloadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/export/{file_id}/download", local_var_configuration.base_path, file_id=file_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesExportDownloadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Exports the specified workbench to a file. Once requested, the file can be downloaded using the [export download](ref:workbenches-export-download) method upon receiving a \"ready\" status from the [export status](ref:workbenches-export-status) method. For more information about workbench export files, see [Export File Formats](doc:export-file-formats).  **Caution:** This endpoint is deprecated. Tenable recommends that customers use the [Create report](ref:vm-reports-create) endpoint instead. Please update any existing integrations that your organization has.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_export_request(configuration: &configuration::Configuration, format: &str, report: &str, chapter: &str, start_date: Option<i32>, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>, minimum_vuln_info: Option<bool>, plugin_id: Option<i32>, asset_id: Option<&str>) -> Result<crate::models::WorkbenchesExportRequest200Response, Error<WorkbenchesExportRequestError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/export", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("format", &format.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("report", &report.to_string())]);
    if let Some(ref local_var_str) = start_date {
        local_var_req_builder = local_var_req_builder.query(&[("start_date", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("chapter", &chapter.to_string())]);
    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = minimum_vuln_info {
        local_var_req_builder = local_var_req_builder.query(&[("minimum_vuln_info", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = plugin_id {
        local_var_req_builder = local_var_req_builder.query(&[("plugin_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_id {
        local_var_req_builder = local_var_req_builder.query(&[("asset_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesExportRequestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the status of a pending export. When an export has been requested, it is necessary to poll this endpoint until a \"ready\" status is returned, at which point the file is complete and can be downloaded using the [export download](ref:workbenches-export-download) endpoint.  **Caution:** This endpoint is deprecated. Tenable recommends that customers use the [Create report](ref:vm-reports-create) endpoint instead. Please update any existing integrations that your organization has.    **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_export_status(configuration: &configuration::Configuration, file_id: i32) -> Result<crate::models::WorkbenchesExportStatus200Response, Error<WorkbenchesExportStatusError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/export/{file_id}/status", local_var_configuration.base_path, file_id=file_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesExportStatusError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of recorded vulnerabilities. The list returned is limited to 5,000. To retrieve more than 5,000 vulnerabilities, use the [export-request API](ref:workbenches-export-request). Additionally, this endpoint only returns data less than 450 days (15 months) old.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_vulnerabilities(configuration: &configuration::Configuration, age: Option<i32>, authenticated: Option<bool>, date_range: Option<i32>, exploitable: Option<bool>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>, resolvable: Option<bool>, severity: Option<&str>) -> Result<crate::models::WorkbenchesVulnerabilities200Response, Error<WorkbenchesVulnerabilitiesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/vulnerabilities", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = age {
        local_var_req_builder = local_var_req_builder.query(&[("age", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = authenticated {
        local_var_req_builder = local_var_req_builder.query(&[("authenticated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exploitable {
        local_var_req_builder = local_var_req_builder.query(&[("exploitable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resolvable {
        local_var_req_builder = local_var_req_builder.query(&[("resolvable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = severity {
        local_var_req_builder = local_var_req_builder.query(&[("severity", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesVulnerabilitiesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the details for a plugin.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_vulnerability_info(configuration: &configuration::Configuration, plugin_id: i32, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>) -> Result<crate::models::WorkbenchesVulnerabilityInfo200Response, Error<WorkbenchesVulnerabilityInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/vulnerabilities/{plugin_id}/info", local_var_configuration.base_path, plugin_id=plugin_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesVulnerabilityInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the vulnerability outputs for a plugin. The list returned is limited to 5,000. To retrieve more than 5,000 vulnerability outputs, use the [export-request API](ref:workbenches-export-request). Additionally, this endpoint only returns data less than 450 days (15 months) old.   **Note:** This endpoint is not intended for large or frequent exports of vulnerability or assets data. If you experience errors, reduce the volume, [rate](doc:rate-limiting), or [concurrency](doc:concurrency-limiting) of your requests or narrow your filters. Contact support if you continue to experience errors. Additionally, Tenable recommends the [POST /vulns/export](ref:exports-vulns-request-export) endpoint for large or frequent exports of vulnerability data, and the [POST /assets/export](ref:exports-assets-request-export) endpoint for large or frequent exports of assets data.  For information and best practices for retrieving vulnerability and assets data from Tenable.io, see [Retrieve Vulnerability Data from Tenable.io](doc:retrieve-vulnerability-data-from-tenableio) and [Retrieve Asset Data from Tenable.io](doc:retrieve-asset-data-from-tenableio).<div class=\"perms-callout\">Requires BASIC [16] user permissions. See [Permissions](doc:permissions).</div>
pub async fn workbenches_vulnerability_output(configuration: &configuration::Configuration, plugin_id: i32, date_range: Option<i32>, filter_period_0_period_filter: Option<&str>, filter_period_0_period_quality: Option<&str>, filter_period_0_period_value: Option<&str>, filter_period_search_type: Option<&str>) -> Result<Vec<crate::models::WorkbenchesVulnerabilityOutput200ResponseInner>, Error<WorkbenchesVulnerabilityOutputError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/workbenches/vulnerabilities/{plugin_id}/outputs", local_var_configuration.base_path, plugin_id=plugin_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_range {
        local_var_req_builder = local_var_req_builder.query(&[("date_range", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_quality {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_0_period_value {
        local_var_req_builder = local_var_req_builder.query(&[("filter.0.value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_period_search_type {
        local_var_req_builder = local_var_req_builder.query(&[("filter.search_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-ApiKeys", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WorkbenchesVulnerabilityOutputError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

